import os
import time
import hashlib
import json
import logging
from datetime import datetime
from typing import List, Dict, Any, Optional, Set
import re

import requests
from bs4 import BeautifulSoup
from dotenv import load_dotenv
import telebot

# Logging ayarlarÄ±
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("scraper.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# .env dosyasÄ±nÄ± yÃ¼kle
load_dotenv()

# Telegram Bot API token'Ä±
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# Duyuru kaynaklarÄ±
SOURCES = {
    "estu": {
        "name": "EskiÅŸehir Teknik Ãœniversitesi",
        "url": "https://www.eskisehir.edu.tr/tr/Duyuru",
        "selector": "h3"
    },
    "estu_ceng": {
        "name": "ESTÃœ Bilgisayar MÃ¼hendisliÄŸi BÃ¶lÃ¼mÃ¼",
        "url": "https://ceng.eskisehir.edu.tr/tr/Duyuru",
        "selector": "h3"
    },
    "estu_uib": {
        "name": "ESTÃœ UluslararasÄ± Ä°liÅŸkiler Birimi",
        "url": "https://uib.eskisehir.edu.tr/tr/Duyuru",
        "selector": "h3"
    }
}

# Daha Ã¶nce gÃ¶nderilen duyurularÄ± saklamak iÃ§in dosya
HISTORY_FILE = "announcement_history.json"

class AnnouncementScraper:
    def __init__(self, telegram_token: str, chat_id: str):
        self.telegram_token = telegram_token
        self.chat_id = chat_id
        self.bot = self._setup_telegram_bot()
        self.sent_announcements = self._load_history()
        
    def _setup_telegram_bot(self) -> telebot.TeleBot:
        """Telegram botunu ayarla."""
        if not self.telegram_token:
            logger.error("Telegram token bulunamadÄ±! .env dosyasÄ±nÄ± kontrol edin.")
            return None
        
        return telebot.TeleBot(token=self.telegram_token)
    
    def _load_history(self) -> Set[str]:
        """Daha Ã¶nce gÃ¶nderilen duyurularÄ±n hash'lerini yÃ¼kle."""
        if os.path.exists(HISTORY_FILE):
            try:
                with open(HISTORY_FILE, "r", encoding="utf-8") as f:
                    return set(json.load(f))
            except Exception as e:
                logger.error(f"GeÃ§miÅŸ dosyasÄ± yÃ¼klenirken hata oluÅŸtu: {e}")
                return set()
        return set()
    
    def _save_history(self) -> None:
        """GÃ¶nderilen duyurularÄ±n hash'lerini kaydet."""
        try:
            with open(HISTORY_FILE, "w", encoding="utf-8") as f:
                json.dump(list(self.sent_announcements), f)
        except Exception as e:
            logger.error(f"GeÃ§miÅŸ dosyasÄ± kaydedilirken hata oluÅŸtu: {e}")
    
    def _generate_hash(self, announcement: Dict[str, Any]) -> str:
        """Duyuru iÃ§in benzersiz bir hash oluÅŸtur."""
        content = f"{announcement['title']}{announcement['link']}{announcement['date']}"
        return hashlib.md5(content.encode()).hexdigest()
    
    def _is_new_announcement(self, announcement_hash: str) -> bool:
        """Duyurunun daha Ã¶nce gÃ¶nderilip gÃ¶nderilmediÄŸini kontrol et."""
        return announcement_hash not in self.sent_announcements
    
    def fetch_announcements(self, source_id: str) -> List[Dict[str, Any]]:
        """Belirtilen kaynaktan duyurularÄ± Ã§eker."""
        source = SOURCES.get(source_id)
        if not source:
            logger.error(f"Kaynak bulunamadÄ±: {source_id}")
            return []
            
        try:
            logger.info(f"{source['name']} sitesinden duyurular Ã§ekiliyor...")
            response = requests.get(source['url'], timeout=10)
            response.raise_for_status()
            
            # HTML iÃ§eriÄŸini parse et
            soup = BeautifulSoup(response.text, 'html5lib')
            
            # Duyuru Ã¶ÄŸelerini bul
            items = soup.select(source['selector'])
            
            announcements = []
            for item in items:
                announcement = self._parse_estu_announcement(item, source)
                
                if announcement:
                    announcements.append(announcement)
            
            logger.info(f"{source['name']} sitesinden {len(announcements)} duyuru Ã§ekildi.")
            return announcements
            
        except Exception as e:
            logger.error(f"{source['name']} sitesinden duyurular Ã§ekilirken hata oluÅŸtu: {e}")
            return []
    
    def _parse_estu_announcement(self, item, source) -> Dict[str, Any]:
        """EskiÅŸehir Teknik Ãœniversitesi duyurularÄ±nÄ± ayrÄ±ÅŸtÄ±r."""
        try:
            # ArtÄ±k item doÄŸrudan h3 elementi
            title = item.text.strip()
            
            # Ebeveyn elementlerden a etiketini bulmaya Ã§alÄ±ÅŸ
            link_elem = item.find_parent('a')
            if not link_elem:
                # KardeÅŸ elementlerden a etiketini aramayÄ± dene
                link_elem = item.find_next_sibling('a') or item.find_previous_sibling('a')
                
                # a etiketi bulunamadÄ±ysa, parent div'in iÃ§indeki a etiketini kontrol et
                if not link_elem:
                    parent_div = item.find_parent('div')
                    if parent_div:
                        link_elem = parent_div.find('a')
            
            # Hala bulunamadÄ±ysa, h3'e en yakÄ±n a etiketini bul
            if not link_elem:
                # TÃ¼m a etiketlerini bul ve h3'e en yakÄ±n olanÄ± seÃ§
                all_links = item.find_all_next('a')
                if all_links:
                    link_elem = all_links[0]
            
            link = link_elem.get("href", "") if link_elem else ""
            
            # EÄŸer link gÃ¶receli ise mutlak URL'ye Ã§evir
            if link and not link.startswith(("http://", "https://")):
                base_url = "/".join(source["url"].split("/")[:3])
                link = f"{base_url}{link if link.startswith('/') else '/' + link}"
            
            # BugÃ¼nÃ¼n tarihini al
            today = datetime.now().strftime("%d.%m.%Y")
            
            # Duyurunun yayÄ±n tarihini bugÃ¼n olarak iÅŸaretle
            announcement_date = today
            
            # Duyurunun bugÃ¼ne ait olduÄŸunu iÅŸaretle (tÃ¼m duyurularÄ± bugÃ¼nÃ¼n duyurusu olarak kabul ediyoruz)
            # GerÃ§ek senaryoda, web sayfasÄ±ndan duyuru tarihi Ã§ekilebilir ve karÅŸÄ±laÅŸtÄ±rma yapÄ±labilir
            is_today = True
            
            # Sadece bugÃ¼nÃ¼n duyurularÄ±nÄ± dÃ¶ndÃ¼r
            if is_today:
                return {
                    "source": source["name"],
                    "title": title,
                    "date": announcement_date,
                    "link": link
                }
            else:
                return None
                
        except Exception as e:
            logger.error(f"Duyuru ayrÄ±ÅŸtÄ±rÄ±lÄ±rken hata oluÅŸtu: {e}")
            return None
    
    def send_telegram_message(self, announcement):
        """Duyuruyu Telegram Ã¼zerinden gÃ¶nderir."""
        try:
            message = (
                f"ğŸ“¢ *{announcement['source']}*\n\n"
                f"*{announcement['title']}*\n\n"
                f"ğŸ“… {announcement['date']}\n\n"
                f"ğŸ”— [Detaylar iÃ§in tÄ±klayÄ±n]({announcement['link']})"
            )
            
            # pyTelegramBotAPI ile mesaj gÃ¶nderme
            self.bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode='Markdown',
                disable_web_page_preview=False
            )
            
            # BaÅŸarÄ±yla gÃ¶nderilen duyurunun hash'ini kaydet
            announcement_hash = self._generate_hash(announcement)
            self.sent_announcements.add(announcement_hash)
            
            logger.info(f"Duyuru baÅŸarÄ±yla gÃ¶nderildi: {announcement['title']}")
            return True
            
        except Exception as e:
            logger.error(f"Telegram mesajÄ± gÃ¶nderilirken hata oluÅŸtu: {e}")
            return False
    
    def run(self) -> None:
        """TÃ¼m kaynaklardan duyurularÄ± Ã§ek ve yeni olanlarÄ± gÃ¶nder."""
        new_announcements_sent = False
        
        for source_id in SOURCES:
            announcements = self.fetch_announcements(source_id)
            source_name = SOURCES[source_id]["name"]
            source_has_new = False
            
            for announcement in announcements:
                announcement_hash = self._generate_hash(announcement)
                
                if self._is_new_announcement(announcement_hash):
                    success = self.send_telegram_message(announcement)
                    if success:
                        new_announcements_sent = True
                        source_has_new = True
                        # Her mesaj arasÄ±nda kÄ±sa bir bekleme yap (rate limit'i aÅŸmamak iÃ§in)
                        time.sleep(1)
            
            # Bu kaynaktan hiÃ§ yeni duyuru yoksa veya hiÃ§ duyuru Ã§ekilmediyse, bildirim gÃ¶nder
            if not source_has_new:
                try:
                    message = f"ğŸ“¢ *{source_name}*\n\n BugÃ¼n iÃ§in yeni duyuru bulunmamaktadÄ±r."
                    self.bot.send_message(
                        chat_id=self.chat_id,
                        text=message,
                        parse_mode='Markdown'
                    )
                    logger.info(f"{source_name} iÃ§in 'bugÃ¼n yeni duyuru yok' bildirimi gÃ¶nderildi.")
                    time.sleep(1)
                except Exception as e:
                    logger.error(f"Bildirim gÃ¶nderilirken hata oluÅŸtu: {e}")
        
        # GeÃ§miÅŸi kaydet
        if new_announcements_sent:
            self._save_history()
            logger.info("Yeni duyurular gÃ¶nderildi ve geÃ§miÅŸ gÃ¼ncellendi.")
        else:
            logger.info("BugÃ¼n iÃ§in yeni duyuru bulunamadÄ±.")

def main():
    """Ana program."""
    logger.info("Duyuru tarama iÅŸlemi baÅŸlatÄ±lÄ±yor...")
    
    # Gerekli ortam deÄŸiÅŸkenlerini kontrol et
    if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
        logger.error("TELEGRAM_TOKEN ve TELEGRAM_CHAT_ID .env dosyasÄ±nda tanÄ±mlanmalÄ±dÄ±r!")
        return
    
    try:
        scraper = AnnouncementScraper(TELEGRAM_TOKEN, TELEGRAM_CHAT_ID)
        scraper.run()
        logger.info("Ä°ÅŸlem tamamlandÄ±.")
    except Exception as e:
        logger.error(f"Ä°ÅŸlem sÄ±rasÄ±nda beklenmeyen bir hata oluÅŸtu: {e}")

if __name__ == "__main__":
    main() 